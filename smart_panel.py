###################################################################################################
####################################### БЛОК СОЗДАНИЯ АДДНОНА #####################################
###################################################################################################

# Создаёт кнопки слева для ускорения переключения параметров объёктов

bl_info = {"name": "Smart panel",
           "description": "Smart panel",
           "author": "SL",
           "version": (1, 2),
           "blender": (3, 3, 1),
           "location": "3D View",
           "warning": "",
           "wiki_url": "",
           "tracker_url": "",
           "category": "3D View"
           }

###################################################################################################
####################################### БЛОК ОПИСАНИЯ КЛАССОВ  МЕНЮ ###############################
###################################################################################################

#импорт модуля
import bpy          

# В этом классе содаётся меню в левой панели и там кнопки 

class Smart_panel(bpy.types.Panel):
    """Создается класс с типом меню Panel"""
     
    # Название нашего меню
    bl_label = "Smart panel"       
    # Окно расположения
    bl_space_type = 'VIEW_3D'          
    # Панель расположения
    bl_region_type = 'TOOLS'           
    
    def draw(self, context):
        """Отображающая меню с кнопками"""
        
        # блок для элементов управления    
        layout_show_wire = self.layout
        # подписть блока
        layout_show_wire.label(text="Show wire:")
        # создаёт подблок в блоке layout_show_wire    
        split = layout_show_wire.split()
        # создаёт колонку в подблоке split    
        col = split.column(align=True)
        # Кнопки в созданной колонке col
        # В кнопки вставляем ссылки на методы созданные в классах
        col.operator(".show_wire_on", text="Show wire on")
        col.operator(".show_wire_off", text="Show wire off")
        
        # блок для элементов управления
        layout_textured_or_wire = self.layout
        # подписть блока
        layout_textured_or_wire.label(text="Textured or wire:")
        # создаёт подблок в блоке layout_textured_or_wire    
        split = layout_textured_or_wire.split()
        # создаёт колонку в подблоке split    
        col = split.column(align=True)
        # Кнопки в созданной колонке col
        # В кнопки вставляем ссылки на методы созданные в классах
        col.operator(".textured_wire_textured", text="Texture")
        col.operator(".textured_wire_wire", text="Wire")

###################################################################################################
################################ БЛОК ОПИСАНИЯ КЛАССОВ  РАБОТАЮЩИХ ФУНКЦИЙ ########################
###################################################################################################

# Создание классов, и методов к ним.
# В них создаются элементы меню (консольные), вводимые через пробел и сами выполняемые функции.
# Создаются ссылки на функции для кнопок. 
# Работает так: Пробел, писать то что в лейбле, например bl_label = "ShowWireTrue" писать: ShowWireTrue 



class ShowWireTrue(bpy.types.Operator): 
    # blender будет использовать это для подсказок в пунктах меню и кнопках
    """Show wire on - Включить сетку"""         
    
    # уникальный идентификатор для кнопок и пунктов меню;
    # служит в качестве ссылки на этот оператор (вставляем в кнопки, всё с маленькой буквы)
    # начинается с точки или чифры с точкой
    bl_idname = ".show_wire_on" 
    # вводим после пробеля чтобы выполнить
    # Имя для отображения в пользовательском интерфейсе (и поиска через начало ввода)
    bl_label = "ShowWireTrue"
    # параметр undo даст оператору право влезать в историю операторов (изменений)      
    bl_options = {'REGISTER', 'UNDO'}     
    
    # Основной метод аддона:
    def execute(self, context):
        # цикл присваивает i по порядку каждый объект из всех выделеных 
        for i in bpy.context.selected_objects:
            # необходимые изменения атрибутов объекта
            i.show_wire = True
            i.show_all_edges = True
        # это даст Блендеру знать, что оператор завершился успешно            
        return {'FINISHED'} 
 


class ShowWireFalse(bpy.types.Operator): 
    # blender будет использовать это для подсказок в пунктах меню и кнопках
    """Show wire off - Выключить сетку"""         
    
    # уникальный идентификатор для кнопок и пунктов меню;
    # служит в качестве ссылки на этот оператор (вставляем в кнопки, всё с маленькой буквы)
    # начинается с точки или чифры с точкой
    bl_idname = ".show_wire_off" 
    # вводим после пробеля чтобы выполнить
    # Имя для отображения в пользовательском интерфейсе (и поиска через начало ввода)
    bl_label = "ShowWireFalse"
    # параметр undo даст оператору право влезать в историю операторов (изменений)      
    bl_options = {'REGISTER', 'UNDO'}     
    
    # Основной метод аддона:
    def execute(self, context):
        # цикл присваивает i по порядку каждый объект из всех выделеных 
        for i in bpy.context.selected_objects:
            # необходимые изменения атрибутов объекта
            i.show_wire = False
            i.show_all_edges = False
        # это даст Блендеру знать, что оператор завершился успешно            
        return {'FINISHED'}               



class TexturedWire_TEXTURED(bpy.types.Operator): 
    # blender будет использовать это для подсказок в пунктах меню и кнопках
    """TEXTURED OR WIRE -> texture - Отображать текстуры"""         
    
    # уникальный идентификатор для кнопок и пунктов меню;
    # служит в качестве ссылки на этот оператор (вставляем в кнопки, всё с маленькой буквы)
    # начинается с точки или чифры с точкой
    bl_idname = ".textured_wire_textured" 
    # вводим после пробеля чтобы выполнить
    # Имя для отображения в пользовательском интерфейсе (и поиска через начало ввода)
    bl_label = "TexturedWire_TEXTURED"
    # параметр undo даст оператору право влезать в историю операторов (изменений)      
    bl_options = {'REGISTER', 'UNDO'}     
    
    # Основной метод аддона:
    def execute(self, context):
        # цикл присваивает i по порядку каждый объект из всех выделеных 
        for i in bpy.context.selected_objects:
            # необходимые изменения атрибутов объекта
            i.display_type = 'TEXTURED'
        # это даст Блендеру знать, что оператор завершился успешно            
        return {'FINISHED'} 
 


class TexturedWire_WIRE(bpy.types.Operator): 
    # blender будет использовать это для подсказок в пунктах меню и кнопках
    """TEXTURED OR WIRE -> wire - Отображать каркас"""         
    
    # уникальный идентификатор для кнопок и пунктов меню;
    # служит в качестве ссылки на этот оператор (вставляем в кнопки, всё с маленькой буквы)
    # начинается с точки или чифры с точкой
    bl_idname = ".textured_wire_wire" 
    # вводим после пробеля чтобы выполнить
    # Имя для отображения в пользовательском интерфейсе (и поиска через начало ввода)
    bl_label = "TexturedWire_WIRE"
    # параметр undo даст оператору право влезать в историю операторов (изменений)      
    bl_options = {'REGISTER', 'UNDO'}     
    
    # Основной метод аддона:
    def execute(self, context):
        # цикл присваивает i по порядку каждый объект из всех выделеных 
        for i in bpy.context.selected_objects:
            # необходимые изменения атрибутов объекта
            i.display_type = 'WIRE'
        # это даст Блендеру знать, что оператор завершился успешно            
        return {'FINISHED'}               

###################################################################################################
####################################### БЛОК РЕГИСТРАЦИИ КЛАССООВ #################################
###################################################################################################

#Функция загружает скрипт при включении аддона: 
#Прописываю все свои классы  
 
def register():
    bpy.utils.register_class(ShowWireTrue)
    bpy.utils.register_class(ShowWireFalse)
    
    bpy.utils.register_class(TexturedWire_TEXTURED)
    bpy.utils.register_class(TexturedWire_WIRE)
    
    bpy.utils.register_class(Smart_panel)
 
#Функция выгружает скрипт при отключении аддона:
#Прописываю все свои классы 
 
def unregister():
    bpy.utils.unregister_class(ShowWireTrue)
    bpy.utils.unregister_class(ShowWireFalse)
    
    bpy.utils.register_class(TexturedWire_TEXTURED)
    bpy.utils.register_class(TexturedWire_WIRE)
    
    bpy.utils.unregister_class(Smart_panel)
    
###################################################################################################
####################################### БЛОК ЗАПУСКА ##############################################
###################################################################################################    
 
# Следующие две строки дают вам возможность запускать этот аддон
# прямо из текстового редактора Блендера, без установки в программе через User Preferences
if __name__ == "__main__":
    register()